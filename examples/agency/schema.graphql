# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  tenants(where: TenantWhereInput! = {}, orderBy: [TenantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenantWhereUniqueInput): [Tenant!]
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  tenants: JSON
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  tenants: JSON
}

type Permission {
  id: ID!
  tenant: Tenant
  delegates(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  delegatesCount(where: UserWhereInput! = {}): Int
  operation: PermissionOperationType
}

enum PermissionOperationType {
  C
  R
  U
  D
}

input PermissionWhereUniqueInput {
  id: ID
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  id: IDFilter
  tenant: TenantWhereInput
  delegates: UserManyRelationFilter
  operation: PermissionOperationTypeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PermissionOperationTypeNullableFilter {
  equals: PermissionOperationType
  in: [PermissionOperationType!]
  notIn: [PermissionOperationType!]
  not: PermissionOperationTypeNullableFilter
}

input PermissionOrderByInput {
  id: OrderDirection
  operation: OrderDirection
}

input PermissionUpdateInput {
  tenant: TenantRelateToOneForUpdateInput
  delegates: UserRelateToManyForUpdateInput
  operation: PermissionOperationType
}

input TenantRelateToOneForUpdateInput {
  create: TenantCreateInput
  connect: TenantWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PermissionUpdateArgs {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateInput!
}

input PermissionCreateInput {
  tenant: TenantRelateToOneForCreateInput
  delegates: UserRelateToManyForCreateInput
  operation: PermissionOperationType
}

input TenantRelateToOneForCreateInput {
  create: TenantCreateInput
  connect: TenantWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Tenant {
  id: ID!
  title: String
  parent: Tenant
  children(where: TenantWhereInput! = {}, orderBy: [TenantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenantWhereUniqueInput): [Tenant!]
  childrenCount(where: TenantWhereInput! = {}): Int
  ancestors(where: TenantWhereInput! = {}, orderBy: [TenantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenantWhereUniqueInput): [Tenant!]
  descendants(where: TenantWhereInput! = {}, orderBy: [TenantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenantWhereUniqueInput): [Tenant!]
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
}

input TenantWhereUniqueInput {
  id: ID
  title: String
}

input TenantWhereInput {
  AND: [TenantWhereInput!]
  OR: [TenantWhereInput!]
  NOT: [TenantWhereInput!]
  id: IDFilter
  title: StringFilter
  parent: TenantWhereInput
  children: TenantManyRelationFilter
}

input TenantManyRelationFilter {
  every: TenantWhereInput
  some: TenantWhereInput
  none: TenantWhereInput
}

input TenantOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input TenantUpdateInput {
  title: String
  parent: TenantRelateToOneForUpdateInput
  children: TenantRelateToManyForUpdateInput
  ancestors: JSON
  descendants: JSON
  users: JSON
}

input TenantRelateToManyForUpdateInput {
  disconnect: [TenantWhereUniqueInput!]
  set: [TenantWhereUniqueInput!]
  create: [TenantCreateInput!]
  connect: [TenantWhereUniqueInput!]
}

input TenantUpdateArgs {
  where: TenantWhereUniqueInput!
  data: TenantUpdateInput!
}

input TenantCreateInput {
  title: String
  parent: TenantRelateToOneForCreateInput
  children: TenantRelateToManyForCreateInput
  ancestors: JSON
  descendants: JSON
  users: JSON
}

input TenantRelateToManyForCreateInput {
  create: [TenantCreateInput!]
  connect: [TenantWhereUniqueInput!]
}

type Advertiser {
  id: ID!
  title: String
  tenant: Tenant
  meta: String
  oneView: String
  xandr: String
}

input AdvertiserWhereUniqueInput {
  id: ID
  title: String
}

input AdvertiserWhereInput {
  AND: [AdvertiserWhereInput!]
  OR: [AdvertiserWhereInput!]
  NOT: [AdvertiserWhereInput!]
  id: IDFilter
  title: StringFilter
  tenant: TenantWhereInput
  meta: StringNullableFilter
  oneView: StringNullableFilter
  xandr: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input AdvertiserOrderByInput {
  id: OrderDirection
  title: OrderDirection
  meta: OrderDirection
  oneView: OrderDirection
  xandr: OrderDirection
}

input AdvertiserUpdateInput {
  title: String
  tenant: TenantRelateToOneForUpdateInput
  meta: String
  oneView: String
  xandr: String
}

input AdvertiserUpdateArgs {
  where: AdvertiserWhereUniqueInput!
  data: AdvertiserUpdateInput!
}

input AdvertiserCreateInput {
  title: String
  tenant: TenantRelateToOneForCreateInput
  meta: String
  oneView: String
  xandr: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPermission(data: PermissionCreateInput!): Permission
  createPermissions(data: [PermissionCreateInput!]!): [Permission]
  updatePermission(where: PermissionWhereUniqueInput!, data: PermissionUpdateInput!): Permission
  updatePermissions(data: [PermissionUpdateArgs!]!): [Permission]
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deletePermissions(where: [PermissionWhereUniqueInput!]!): [Permission]
  createTenant(data: TenantCreateInput!): Tenant
  createTenants(data: [TenantCreateInput!]!): [Tenant]
  updateTenant(where: TenantWhereUniqueInput!, data: TenantUpdateInput!): Tenant
  updateTenants(data: [TenantUpdateArgs!]!): [Tenant]
  deleteTenant(where: TenantWhereUniqueInput!): Tenant
  deleteTenants(where: [TenantWhereUniqueInput!]!): [Tenant]
  createAdvertiser(data: AdvertiserCreateInput!): Advertiser
  createAdvertisers(data: [AdvertiserCreateInput!]!): [Advertiser]
  updateAdvertiser(where: AdvertiserWhereUniqueInput!, data: AdvertiserUpdateInput!): Advertiser
  updateAdvertisers(data: [AdvertiserUpdateArgs!]!): [Advertiser]
  deleteAdvertiser(where: AdvertiserWhereUniqueInput!): Advertiser
  deleteAdvertisers(where: [AdvertiserWhereUniqueInput!]!): [Advertiser]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  permissions(where: PermissionWhereInput! = {}, orderBy: [PermissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PermissionWhereUniqueInput): [Permission!]
  permission(where: PermissionWhereUniqueInput!): Permission
  permissionsCount(where: PermissionWhereInput! = {}): Int
  tenants(where: TenantWhereInput! = {}, orderBy: [TenantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TenantWhereUniqueInput): [Tenant!]
  tenant(where: TenantWhereUniqueInput!): Tenant
  tenantsCount(where: TenantWhereInput! = {}): Int
  advertisers(where: AdvertiserWhereInput! = {}, orderBy: [AdvertiserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdvertiserWhereUniqueInput): [Advertiser!]
  advertiser(where: AdvertiserWhereUniqueInput!): Advertiser
  advertisersCount(where: AdvertiserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
