// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.myprisma/client"
}

model User {
  id                        String       @id @default(cuid())
  name                      String       @default("")
  email                     String       @unique @default("")
  password                  String?
  from_Permission_delegates Permission[] @relation("Permission_delegates")
}

model Permission {
  id        String                   @id @default(cuid())
  tenant    Tenant?                  @relation("Permission_tenant", fields: [tenantId], references: [id])
  tenantId  String?                  @map("tenant")
  delegates User[]                   @relation("Permission_delegates")
  operation PermissionOperationType?

  @@index([tenantId])
}

model Tenant {
  id                     String       @id @default(cuid())
  title                  String       @unique @default("")
  parent                 Tenant?      @relation("Tenant_parent", fields: [parentId], references: [id])
  parentId               String?      @map("parent")
  children               Tenant[]     @relation("Tenant_parent")
  from_Permission_tenant Permission[] @relation("Permission_tenant")
  from_Advertiser_tenant Advertiser[] @relation("Advertiser_tenant")

  @@index([parentId])
}

model Tag {
  id                   String        @id @default(cuid())
  title                String        @unique @default("")
  color                String        @default("")
  from_AudienceTag_tag AudienceTag[] @relation("AudienceTag_tag")
}

model Advertiser {
  id                       String     @id @default(cuid())
  title                    String     @unique @default("")
  tenant                   Tenant?    @relation("Advertiser_tenant", fields: [tenantId], references: [id])
  tenantId                 String?    @map("tenant")
  meta                     String?
  oneView                  String?
  xandr                    String?
  from_Audience_advertiser Audience[] @relation("Audience_advertiser")

  @@index([tenantId])
}

model TargetingDataSource {
  id                       String                           @id @default(cuid())
  dataType                 TargetingDataSourceDataTypeType?
  title                    String                           @unique @default("")
  filtering                String                           @default("")
  from_Audience_dataSource Audience[]                       @relation("Audience_dataSource")
}

model TargetingGeoFrame {
  id      String @id @default(cuid())
  ESQID   String @default("")
  title   String @default("")
  polygon Json?
  street  String @default("")
  city    String @default("")
  state   String @default("")
  zipCode String @default("")
}

model TargetingProcessingStep {
  id                           String                                 @id @default(cuid())
  outputType                   TargetingProcessingStepOutputTypeType?
  customCoding                 String                                 @default("")
  from_AudienceProcess_process AudienceProcess[]                      @relation("AudienceProcess_process")
}

model Audience {
  id                            String                   @id @default(cuid())
  advertiser                    Advertiser?              @relation("Audience_advertiser", fields: [advertiserId], references: [id])
  advertiserId                  String?                  @map("advertiser")
  status                        Boolean                  @default(true)
  rebuild                       Int?                     @default(1)
  rebuildUnit                   AudienceRebuildUnitType? @default(months)
  TTL_Length                    Int?                     @default(1)
  TTL_Unit                      AudienceTTLUnitType?     @default(months)
  dataSource                    TargetingDataSource?     @relation("Audience_dataSource", fields: [dataSourceId], references: [id])
  dataSourceId                  String?                  @map("dataSource")
  dataFilter                    String?
  meta                          String?
  oneView                       String?
  xandr                         String?
  from_AudienceTag_audience     AudienceTag[]            @relation("AudienceTag_audience")
  from_AudienceProcess_audience AudienceProcess[]        @relation("AudienceProcess_audience")

  @@index([advertiserId])
  @@index([dataSourceId])
}

model AudienceTag {
  id         String    @id @default(cuid())
  audience   Audience? @relation("AudienceTag_audience", fields: [audienceId], references: [id])
  audienceId String?   @map("audience")
  tag        Tag?      @relation("AudienceTag_tag", fields: [tagId], references: [id])
  tagId      String?   @map("tag")
  order      Int       @default(0)

  @@unique([audienceId, tagId])
  @@unique([audienceId, order])
  @@index([audienceId])
  @@index([tagId])
}

model AudienceProcess {
  id         String                   @id @default(cuid())
  audience   Audience?                @relation("AudienceProcess_audience", fields: [audienceId], references: [id])
  audienceId String?                  @map("audience")
  process    TargetingProcessingStep? @relation("AudienceProcess_process", fields: [processId], references: [id])
  processId  String?                  @map("process")
  order      Int                      @default(0)

  @@unique([audienceId, processId])
  @@unique([audienceId, order])
  @@index([audienceId])
  @@index([processId])
}

enum PermissionOperationType {
  C
  R
  U
  D
}

enum TargetingDataSourceDataTypeType {
  addresses
  device_ids
  polygons
}

enum TargetingProcessingStepOutputTypeType {
  addresses
  device_ids
  polygons
}

enum AudienceRebuildUnitType {
  days
  weeks
  months
}

enum AudienceTTLUnitType {
  days
  weeks
  months
}
